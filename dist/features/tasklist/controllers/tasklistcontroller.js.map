{"version":3,"sources":["../../../../client/features/tasklist/controllers/tasklistcontroller.js"],"names":[],"mappings":";;AAAA,IAAM,WAAW,QAAQ,MAAR,CAAe,UAAf,EAA2B,EAA3B,CAAjB;;AAEA,SAAS,UAAT,CAAoB,oBAApB,EAA0C,UAAS,MAAT,EAAiB,UAAjB,EAA6B,QAA7B,EAAuC,WAAvC,EAAoD;;;AAG5F,SAAO,KAAP;;;AAGA,SAAO,YAAP,GAAsB,UAAC,IAAD,EAAO,MAAP,EAAkB;AACtC,WAAO,eAAP;AACA,SAAK,SAAL;AACA,gBAAY,OAAZ,CAAoB,KAAK,GAAzB,EAA8B,IAA9B;AACD,GAJD;;AAMA,SAAO,iBAAP,GAA2B,UAAC,IAAD,EAAO,MAAP,EAAkB;AAC3C,WAAO,eAAP;AACA,SAAK,SAAL,GAAiB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAE,KAAK,SAAnB,CAAjB;AACA,gBAAY,OAAZ,CAAoB,KAAK,GAAzB,EAA8B,IAA9B;AACD,GAJD;;;AAOA,SAAO,SAAP,GAAmB,UAAC,IAAD,EAAU;;AAE3B,eAAW,UAAX,CAAsB,WAAtB,EAAmC,IAAnC;;AAEA,QAAM,YAAY,OAAO,KAAP,CAAa,OAAb,CAAqB,IAArB,CAAlB;AACA,WAAO,KAAP,CAAa,MAAb,CAAoB,SAApB,EAA+B,CAA/B;AACD,GAND;;;AASA,MAAM,cAAc,SAAd,WAAc,CAAC,KAAD,EAAQ,IAAR,EAAiB;AACnC,WAAO,KAAP,CAAa,IAAb,CAAkB,IAAlB;AACD,GAFD;AAGA,aAAW,GAAX,CAAe,aAAf,EAA8B,WAA9B;;;AAGA,SAAO,UAAP,GAAoB,UAAC,IAAD,EAAO,MAAP,EAAkB;;AAEpC,QAAG,MAAH,EAAW,OAAO,eAAP;;AAEX,gBAAY,UAAZ,CAAuB,KAAK,GAA5B,EACG,IADH,CACQ,UAAC,QAAD,EAAc;;AAElB,UAAM,YAAY,OAAO,KAAP,CAAa,OAAb,CAAqB,IAArB,CAAlB;AACA,aAAO,KAAP,CAAa,MAAb,CAAoB,SAApB,EAA+B,CAA/B;AACD,KALH;AAMD,GAVD;;;AAaA,SAAO,UAAP,GAAoB,YAAM;AACxB,eAAW,UAAX,CAAsB,YAAtB;AACD,GAFD;;AAIA,SAAO,QAAP,GAAkB,UAAC,IAAD,EAAO,MAAP,EAAkB;AAClC,WAAO,eAAP;AACA,eAAW,UAAX,CAAsB,UAAtB,EAAkC,IAAlC;AACD,GAHD;;;AAMA,MAAM,OAAO,SAAP,IAAO,GAAM;AACjB,gBAAY,QAAZ,GACG,IADH,CACQ,UAAC,QAAD,EAAc;AAClB,aAAO,KAAP,GAAe,SAAS,IAAxB;AACD,KAHH;AAID,GALD;AAMA;AACD,CAhED","file":"tasklistcontroller.js","sourcesContent":["const taskList = angular.module('taskList', []);\n\ntaskList.controller('taskListController', function($scope, $rootScope, $timeout, httpFactory) {\n\n  // Stores tasks\n  $scope.tasks;\n\n  // Adds additional pomodoros to the task\n  $scope.addPomodoros = (task, $event) => {\n    $event.stopPropagation();\n    task.pomodoros++;\n    httpFactory.putTask(task._id, task);\n  };\n  // Removes pomodoros from the task\n  $scope.subtractPomodoros = (task, $event) => {\n    $event.stopPropagation();\n    task.pomodoros = Math.max(1, --task.pomodoros);\n    httpFactory.putTask(task._id, task);\n  };\n\n  // Switches the 'current task'\n  $scope.stageTask = (task) => {\n    // Tells currentTaskController to stage task\n    $rootScope.$broadcast('stageTask', task);\n    // Removes task from the task list\n    const taskIndex = $scope.tasks.indexOf(task);\n    $scope.tasks.splice(taskIndex, 1);\n  };\n\n  // Adds a task back to the task list\n  const unstageTask = (event, task) => {\n    $scope.tasks.push(task);\n  }\n  $rootScope.$on('unstageTask', unstageTask);\n\n  // Deletes a task\n  $scope.deleteTask = (task, $event) => {\n    // Stops propagation if event object passed in\n    if($event) $event.stopPropagation();\n    // Deletes the task from the database\n    httpFactory.deleteTask(task._id)\n      .then((response) => {\n        // Removes the task from the view\n        const taskIndex = $scope.tasks.indexOf(task);\n        $scope.tasks.splice(taskIndex, 1);\n      });\n  }\n\n  // Shows the create event modal\n  $scope.createTask = () => {\n    $rootScope.$broadcast('createTask');\n  };\n  // Shows the edit task modal\n  $scope.editTask = (task, $event) => {\n    $event.stopPropagation();\n    $rootScope.$broadcast('editTask', task);\n  };\n\n  // Initializes the app on load by betting the user's tasks from ther server\n  const init = () => {\n    httpFactory.getTasks()\n      .then((response) => {\n        $scope.tasks = response.data;\n      });\n  };\n  init();\n});\n"]}