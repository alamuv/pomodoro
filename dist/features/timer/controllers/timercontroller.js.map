{"version":3,"sources":["../../../../client/features/timer/controllers/timercontroller.js"],"names":[],"mappings":"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","file":"timercontroller.js","sourcesContent":["const timer = angular.module('timer', []);\n\ntimer.controller('timerController', function($scope, $rootScope, $timeout) {\n\n  /*\n   * The below variables control how the timer operates and how it is displayed\n   */\n  \n  // Default length of task and break\n  $scope.timerSettings = {\n    taskTime: 25,\n    breakTime: 5\n  }\n  // Time left for current pomodoro\n  $scope.timeLeft = $scope.timerSettings.taskTime;\n  // String display of minutes left\n  $scope.minutes = '25';\n  // String display of seconds sleft\n  $scope.seconds = '00';\n  // Toggle to start/pause timer\n  $scope.isPaused = true;\n  // Denotes whether currently in a break\n  $scope.isBreak = false;\n  // Start time\n  $scope.startTime;\n\n\n\n  // Toggles the timer on/off\n  $scope.toggleTimer = () => {\n    if ($scope.isPaused && ($scope.isBreak && $scope.timeLeft === 5 || !$scope.isBreak && $scope.timeLeft === 25)) {\n      $scope.startTime = Date.now();\n    }\n    $scope.isPaused = !$scope.isPaused;\n    decrementTimer();\n  };\n\n  // Resets timer to timerSettings.taskTime/breakTime\n  $scope.resetTimer = () => {\n    if ($scope.isBreak) {\n      $scope.timeLeft = $scope.timerSettings.breakTime;\n      $scope.isPaused = true;\n      minsToString();\n      secsToString();\n    } else {\n      $scope.timeLeft = $scope.timerSettings.taskTime;\n      $scope.isPaused = true;\n      minsToString();\n      secsToString();\n    }\n  }\n\n  /*\n   * The below 2 functions convert the time into a string that is displayed on the page\n   */\n\n  // Converts minutes to a string\n  const minsToString = () => {\n    const mins = Math.floor($scope.timeLeft).toString().length > 1 ? Math.floor($scope.timeLeft).toString() : '0' + Math.floor($scope.timeLeft).toString();\n    $scope.minutes = mins;\n  };\n  // Converts seconds to a string\n  const secsToString = () => {\n    let secs = Math.floor(($scope.timeLeft - parseInt($scope.minutes)) * 60).toString();\n    if (secs.length < 2) secs = '0' + secs;\n    $scope.seconds = secs;\n  };\n\n  /*\n   * The below functions determine what happens when the timer reaches 0 seconcds\n   */\n\n  // Switches to break timer when pomodoro is over\n  const switchToBreak = () => {\n    $scope.isBreak = true;\n    \n    // Sets the timer to the break duration (Default 5min)\n    $scope.timeLeft = $scope.timerSettings.breakTime;\n    \n    // Reduces the number of pomodoros on the task by 1\n    $rootScope.$broadcast('reduceCurrentPomodoros');\n\n    // Shows pomodoro complete alert box and hides it after 1500ms\n    togglePomodoroCompleteAlert();\n    $timeout(togglePomodoroCompleteAlert, 1500);\n  };\n\n  // Switches to pomodoro timer when break is over\n  const switchToTask = () => {\n    $scope.isBreak = false;\n    \n    // Sets the timer to the task/pomodoro duration (Default 25min)\n    $scope.timeLeft = $scope.timerSettings.taskTime;\n  }\n\n  // Suspends timer when there are no more pomodoros left in the task\n  const endTask = () => {\n    // Pauses the timer\n    $scope.isPaused = true;\n\n    // Deletes the task that was just completed\n    $rootScope.$broadcast('deleteCurrentTask');\n\n    $scope.resetTimer();\n\n    // Shows task complete alert box and hides it after 1500ms\n    toggleTaskCompleteAlert();\n    $timeout(toggleTaskCompleteAlert, 1500);\n  }\n  // Decrements the timer by 1 second\n  const decrementTimer = () => {\n    if (!$scope.isPaused) {\n      $scope.timeLeft -= ((Date.now() - $scope.startTime) / 1000) / 60;\n      // If last pomodoro, delete task\n      if ($scope.timeLeft === 0 && currentPomodoros === 1 && $scope.isBreak === false) endTask();\n      // If pomodoro complete, switch to break timer\n      else if ($scope.timeLeft === 0 && $scope.isBreak === false) switchToBreak();\n      // If break complete, switch to pomodoro timer\n      else if ($scope.timeLeft === 0 && $scope.isBreak === true) switchToTask();\n      // Queues additional call to decrementTimer\n      $timeout(decrementTimer, 1000);\n      // Converts timeLeft to formatted minutes and seconds\n      minsToString();\n      secsToString();\n    }\n  };\n\n  // Shows/hides the 'Pomodoro complete' message\n  $scope.showPomodoroAlert = false;\n  const togglePomodoroCompleteAlert = () => {\n    $scope.showPomodoroAlert = !$scope.showPomodoroAlert;\n  }\n  \n  // Shows/hides the 'Task complete' message (task is complete when all of its pomodoros are complete)\n  $scope.showCompleteAlert = false;\n  const toggleTaskCompleteAlert = () => {\n    $scope.showCompleteAlert = !$scope.showCompleteAlert;\n  };\n\n  // Tracks pomodoros left on the currently staged task\n  let currentPomodoros;\n  $rootScope.$on('updatePomodoros', (event, pomodoros) => {\n    currentPomodoros = pomodoros;\n  });\n\n});\n"]}